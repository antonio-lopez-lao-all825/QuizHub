@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using QuizHub.Web.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RoleManager<IdentityRole> RoleManager

<PageTitle>Registro - QuizHub</PageTitle>

<div class="register-container">
    <div class="register-card">
        <div class="card-header">
            <div class="header-icon">
                <i class="fa-solid fa-user-plus"></i>
                <div class="icon-ring"></div>
            </div>
            <h1>Crear Cuenta</h1>
            <p>Únete a QuizHub y comienza tu viaje de aprendizaje</p>
        </div>

        <div class="card-body">
            <StatusMessage Message="@Message" />
            <EditForm Model="Input" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                
                <div class="form-group">
                    <label>
                        <i class="fa-solid fa-envelope"></i>
                        Correo electrónico
                    </label>
                    <InputText @bind-Value="Input.Email" 
                              class="form-control" 
                              autocomplete="username" 
                              placeholder="nombre@ejemplo.com" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>

                <div class="form-group">
                    <label>
                        <i class="fa-solid fa-lock"></i>
                        Contraseña
                    </label>
                    <InputText type="password" 
                              @bind-Value="Input.Password" 
                              class="form-control" 
                              autocomplete="new-password" 
                              placeholder="Tu contraseña" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>

                <div class="form-group">
                    <label>
                        <i class="fa-solid fa-lock"></i>
                        Confirmar Contraseña
                    </label>
                    <InputText type="password" 
                              @bind-Value="Input.ConfirmPassword" 
                              class="form-control" 
                              autocomplete="new-password" 
                              placeholder="Repite tu contraseña" />
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>

                <div class="form-group">
                    <label>
                        <i class="fa-solid fa-user-tag"></i>
                        Tipo de Usuario
                    </label>
                    <InputSelect @bind-Value="Input.Role" class="form-control">
                        <option value="">Seleccione un rol</option>
                        <option value="Profesor">Profesor</option>
                        <option value="Alumno">Alumno</option>
                    </InputSelect>
                    <ValidationMessage For="() => Input.Role" class="text-danger" />
                </div>

                <button type="submit" class="btn-submit">
                    <i class="fa-solid fa-user-plus"></i>
                    Crear Cuenta
                </button>

                <div class="links-section">
                    <a href="Account/Login" class="login-link">
                        <i class="fa-solid fa-arrow-left"></i>
                        Volver al inicio de sesión
                    </a>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser()
    {
        if (Input.Role != "Profesor" && Input.Role != "Alumno")
        {
            identityErrors = new[] { new IdentityError { Description = "El rol debe ser 'Profesor' o 'Alumno'." } };
            return;
        }

        var user = CreateUser();
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        // Crear usuario
        var result = await UserManager.CreateAsync(user, Input.Password);
        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        // Crear el rol si no existe y asignarlo
        if (!await RoleManager.RoleExistsAsync(Input.Role))
        {
            var roleCreationResult = await RoleManager.CreateAsync(new IdentityRole(Input.Role));
            if (!roleCreationResult.Succeeded)
            {
                identityErrors = roleCreationResult.Errors;
                return;
            }
        }

        var roleAssignmentResult = await UserManager.AddToRoleAsync(user, Input.Role);
        if (!roleAssignmentResult.Succeeded)
        {
            identityErrors = roleAssignmentResult.Errors;
            return;
        }

        // Confirmar registro y redirigir
        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = Input.Email });
            return;
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        NavigationManager.NavigateTo("/");
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>()!;
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.")]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required(ErrorMessage = "El rol es obligatorio")]
        [Display(Name = "Role")]
        public string Role { get; set; } = "";
    }
}

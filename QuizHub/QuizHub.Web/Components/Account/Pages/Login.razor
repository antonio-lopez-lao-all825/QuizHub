@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using QuizHub.Web.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Iniciar Sesión - QuizHub</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="card-header">
            <div class="header-icon">
                <i class="fa-solid fa-right-to-bracket"></i>
                <div class="icon-ring"></div>
            </div>
            <h1>Bienvenido a QuizHub</h1>
            <p>Inicia sesión para continuar</p>
        </div>

        <div class="card-body">
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                
                <div class="form-group">
                    <label>
                        <i class="fa-solid fa-envelope"></i>
                        Correo electrónico
                    </label>
                    <InputText @bind-Value="Input.Email" 
                              class="form-control" 
                              autocomplete="username" 
                              placeholder="nombre@ejemplo.com" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>

                <div class="form-group">
                    <label>
                        <i class="fa-solid fa-lock"></i>
                        Contraseña
                    </label>
                    <InputText type="password" 
                              @bind-Value="Input.Password" 
                              class="form-control" 
                              autocomplete="current-password" 
                              placeholder="Tu contraseña" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>

                <div class="form-check">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                    <label class="form-check-label">Recordarme</label>
                </div>

                <button type="submit" class="btn-submit">
                    <i class="fa-solid fa-sign-in-alt"></i>
                    Iniciar Sesión
                </button>

                <div class="links-section">
                    <a href="Account/ForgotPassword" class="forgot-link">
                        <i class="fa-solid fa-key"></i>
                        ¿Olvidaste tu contraseña?
                    </a>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="register-link">
                        <i class="fa-solid fa-user-plus"></i>
                        Registrarse
                    </a>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Usuario o contraseña incorrectos.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "El correo electrónico es obligatorio")]
        [EmailAddress(ErrorMessage = "El formato del correo electrónico no es válido")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es obligatoria")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "¿Recordarme?")]
        public bool RememberMe { get; set; }
    }
}

@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using QuizHub.Web.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<div class="profile-page">
    <div class="page-header">
        <div class="header-content">
            <div class="header-icon">
                <i class="fa-solid fa-lock"></i>
                <div class="icon-ring"></div>
            </div>
            <h1>Cambiar Contraseña</h1>
            <p>Actualiza tu contraseña de acceso</p>
        </div>
    </div>

    <div class="profile-card">
        <StatusMessage Message="@message" />
        
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" class="password-form">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <label>Contraseña Actual</label>
                <div class="input-with-icon">
                    <i class="fa-solid fa-lock"></i>
                    <InputText type="password" @bind-Value="Input.OldPassword" 
                              class="form-control" 
                              autocomplete="current-password"
                              placeholder="Tu contraseña actual" />
                </div>
                <ValidationMessage For="() => Input.OldPassword" />
            </div>

            <div class="form-group">
                <label>Nueva Contraseña</label>
                <div class="input-with-icon">
                    <i class="fa-solid fa-key"></i>
                    <InputText type="password" @bind-Value="Input.NewPassword" 
                              class="form-control" 
                              autocomplete="new-password"
                              placeholder="Tu nueva contraseña" />
                </div>
                <ValidationMessage For="() => Input.NewPassword" />
            </div>

            <div class="form-group">
                <label>Confirmar Nueva Contraseña</label>
                <div class="input-with-icon">
                    <i class="fa-solid fa-check-double"></i>
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" 
                              class="form-control" 
                              autocomplete="new-password"
                              placeholder="Repite tu nueva contraseña" />
                </div>
                <ValidationMessage For="() => Input.ConfirmPassword" />
            </div>

            <button type="submit" class="btn-save">
                <i class="fa-solid fa-save"></i>
                Actualizar Contraseña
            </button>
        </EditForm>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}

@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using QuizHub.Web.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<div class="profile-page">
    <div class="page-header">
        <div class="header-content">
            <div class="header-icon">
                <i class="fa-solid fa-envelope"></i>
                <div class="icon-ring"></div>
            </div>
            <h1>Gestión de Email</h1>
            <p>Administra tu correo electrónico</p>
        </div>
    </div>

    <div class="profile-card">
        <StatusMessage Message="@message" />
        
        <div class="email-section">
            <h3>Email Actual</h3>
            <div class="current-email">
                <div class="email-badge @(isEmailConfirmed ? "verified" : "pending")">
                    <i class="fa-solid @(isEmailConfirmed ? "fa-check" : "fa-clock")"></i>
                    <span>@email</span>
                </div>
                @if (!isEmailConfirmed)
                {
                    <button class="btn-resend" @onclick="OnResendEmailConfirmation">
                        <i class="fa-solid fa-paper-plane"></i>
                        Reenviar verificación
                    </button>
                }
            </div>
        </div>

        <EditForm Model="Input" FormName="email" OnValidSubmit="OnValidSubmitAsync" class="change-email-form">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <label>Nuevo Email</label>
                <div class="input-with-icon">
                    <i class="fa-solid fa-envelope"></i>
                    <InputText @bind-Value="Input.NewEmail" class="form-control" autocomplete="email" placeholder="nuevo@email.com" />
                </div>
                <ValidationMessage For="() => Input.NewEmail" />
            </div>

            <div class="form-group">
                <label>Contraseña</label>
                <div class="input-with-icon">
                    <i class="fa-solid fa-lock"></i>
                    <InputText @bind-Value="Input.Password" type="password" class="form-control" autocomplete="current-password" placeholder="Tu contraseña actual" />
                </div>
                <ValidationMessage For="() => Input.Password" />
            </div>

            <button type="submit" class="btn-save">
                <i class="fa-solid fa-save"></i>
                Cambiar Email
            </button>
        </EditForm>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Confirmation link to change email sent. Please check your email.";
    }

    private async Task OnResendEmailConfirmation()
    {
        if (email is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string? Password { get; set; }
    }
}

@page "/preguntas"

@using QuizHub.Web.Data
@inject ApplicationDbContext db

<PageTitle>Preguntas</PageTitle>

<div class="row">
    <div class="col-10">
        <h1>Preguntas</h1>
    </div>
    <div class="col-2">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
            Añadir Pregunta
        </button>
        <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="exampleModalLabel">Añadir Pregunta</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="pregunta" OnValidSubmit="añadirPregunta">
                            <label>Número de Respuestas:</label>
                            <input @bind="_numeroRespuestas" type="number" class="form-control mb-3" required @oninput="ActualizarRespuestas"></input>
                            <label>Pregunta:</label>
                            <InputText @bind-Value="pregunta.Name" class="form-control mb-3" required></InputText>
                            @if (respuestas != null && respuestas.Count > 0)
                            {
                                @for (int i = 0; i < respuestas.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        <label>Respuesta @(i + 1) (correcta):</label>
                                    }
                                    else
                                    {
                                        <label>Respuesta @(i + 1):</label>
                                    }
                                    <InputText @bind-Value="respuestas[i].Texto" class="form-control mb-3" required></InputText>
                                }
                            }
                            <div class="text-center">
                                <button type="submit" class="btn btn-primary text-center px-10" data-bs-dismiss="modal">Añadir</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (preguntas == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Pregunta</th>
                <th>Estado</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in preguntas)
            {
                <tr>
                    <td>@p.Id</td>
                    <td>@p.Name</td>
                    <td>@p.Estado</td>
                    <td></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Pregunta[]? preguntas;

    protected override async Task OnInitializedAsync()
    {
        preguntas = db.preguntas.ToArray();
    }

    private Pregunta pregunta = new()
        {
            Name = "",
            Estado = 1,
        };

    private int _numeroRespuestas = 0;
    private List<Respuesta> respuestas = new();

    private void ActualizarRespuestas(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int count) && count >= 0)
        {
            while (respuestas.Count < count)
            {
                respuestas.Add(new Respuesta
                    {
                        Texto = string.Empty,
                        Correcta = false,
                        Estado = 1
                    });
            }

            while (respuestas.Count > count)
            {
                respuestas.RemoveAt(respuestas.Count - 1);
            }

            _numeroRespuestas = count;
        }
    }

    protected async Task añadirPregunta()
    {
        db.preguntas.Add(pregunta);
        await db.SaveChangesAsync();

        foreach (var (respuesta, index) in respuestas.Select((r, i) => (r, i)))
        {
            respuesta.IdPregunta = pregunta.Id;
            respuesta.Correcta = index == 0;
        }

        db.respuestas.AddRange(respuestas);
        await db.SaveChangesAsync();

        pregunta = new();
        respuestas.Clear();
        _numeroRespuestas = 0;
    }
}

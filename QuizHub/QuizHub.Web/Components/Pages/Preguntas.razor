@page "/preguntas"

@using QuizHub.Web.Data
@using Microsoft.AspNetCore.Identity
@inject ApplicationDbContext db
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Preguntas</PageTitle>

<div class="row">
    <div class="col-10">
        <h1>Preguntas</h1>
    </div>
    <div class="col-2">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
            Añadir Pregunta
        </button>
        <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="exampleModalLabel">Añadir Pregunta</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="pregunta" OnValidSubmit="AñadirPregunta">
                            <DataAnnotationsValidator />
                            <label>Número de Respuestas:</label>
                            <InputNumber @bind-Value="_numeroRespuestas" class="form-control mb-3" @oninput="ActualizarRespuestas" />

                            <label>Pregunta:</label>
                            <InputText @bind-Value="pregunta.Name" class="form-control mb-3" required />

                            @if (respuestas.Count > 0)
                            {
                                @foreach (var (respuesta, index) in respuestas.Select((r, i) => (r, i)))
                                {
                                    <label>Respuesta @(index + 1):</label>
                                    <InputText @bind-Value="respuesta.Texto" class="form-control mb-1" required />

                                    <div class="form-check mb-3">
                                        <InputRadioGroup @bind-Value="selectedRespuestaCorrecta">
                                            <InputRadio class="form-check-input" Value="@index" />
                                            <label class="form-check-label">Es correcta</label>
                                        </InputRadioGroup>
                                    </div>
                                }
                            }

                            <div class="text-center">
                                <button type="submit" class="btn btn-primary">Añadir</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (preguntas == null)
{
    <p><em>Cargando...</em></p>
}
else if (!preguntas.Any())
{
    <p>No se encontraron preguntas.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Pregunta</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in preguntas)
            {
                <tr>
                    <td>@p.Name</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => AbrirRespuestas(p.Id)">Abrir</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarPregunta(p.Id)">Eliminar</button>
                    </td>
                </tr>
                @if (respuestasPorPregunta.ContainsKey(p.Id))
                {
                    <tr>
                        <td colspan="3">
                            <ul>
                                @foreach (var respuesta in respuestasPorPregunta[p.Id])
                                {
                                    <li>@respuesta.Texto (@(respuesta.Correcta == true ? "Correcta" : "Incorrecta"))</li>
                                }
                            </ul>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private List<Pregunta> preguntas = new();
    private Pregunta pregunta = new Pregunta
        {
            Name = "",
            Estado = 1
        };

    private string _userId = string.Empty;
    private int _numeroRespuestas = 0;
    private List<Respuesta> respuestas = new();

    private Dictionary<int, List<Respuesta>> respuestasPorPregunta = new();
    private int? selectedRespuestaCorrecta = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var currentUser = await UserManager.GetUserAsync(user);
            if (currentUser != null)
            {
                _userId = currentUser.Id;

                preguntas = await db.preguntas
                    .Where(p => p.UserId == _userId)
                    .ToListAsync();
            }
        }
    }

    private void ActualizarRespuestas(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int count) && count >= 0)
        {
            while (respuestas.Count < count)
            {
                respuestas.Add(new Respuesta
                    {
                        Texto = string.Empty,
                        Correcta = false,
                        Estado = 1
                    });
            }

            while (respuestas.Count > count)
            {
                respuestas.RemoveAt(respuestas.Count - 1);
            }

            _numeroRespuestas = count;
        }
    }

    private async Task AñadirPregunta()
    {
        if (!string.IsNullOrEmpty(_userId))
        {
            pregunta.UserId = _userId;

            db.preguntas.Add(pregunta);
            await db.SaveChangesAsync();

            // Establecer la respuesta correcta seleccionada por el profesor
            if (selectedRespuestaCorrecta.HasValue && selectedRespuestaCorrecta.Value >= 0 && selectedRespuestaCorrecta.Value < respuestas.Count)
            {
                respuestas[selectedRespuestaCorrecta.Value].Correcta = true;
            }

            foreach (var r in respuestas)
            {
                r.IdPregunta = pregunta.Id;
            }

            db.respuestas.AddRange(respuestas);
            await db.SaveChangesAsync();

            pregunta = new Pregunta { Name = "", Estado = 1 };
            respuestas.Clear();
            _numeroRespuestas = 0;
            selectedRespuestaCorrecta = 0;

            preguntas = await db.preguntas
                .Where(p => p.UserId == _userId)
                .ToListAsync();

            StateHasChanged();
        }
    }

    private async Task AbrirRespuestas(int preguntaId)
    {
        if (!respuestasPorPregunta.ContainsKey(preguntaId))
        {
            var respuestas = await db.respuestas
                .Where(r => r.IdPregunta == preguntaId)
                .ToListAsync();
            respuestasPorPregunta[preguntaId] = respuestas;
        }
        else
        {
            respuestasPorPregunta.Remove(preguntaId);
        }

        StateHasChanged();
    }

    private async Task EliminarPregunta(int preguntaId)
    {
        var pregunta = await db.preguntas.FindAsync(preguntaId);
        if (pregunta != null)
        {
            var respuestasToRemove = db.respuestas.Where(r => r.IdPregunta == preguntaId);
            db.respuestas.RemoveRange(respuestasToRemove);

            db.preguntas.Remove(pregunta);
            await db.SaveChangesAsync();

            preguntas.RemoveAll(p => p.Id == preguntaId);
            respuestasPorPregunta.Remove(preguntaId);
            StateHasChanged();
        }
    }
}

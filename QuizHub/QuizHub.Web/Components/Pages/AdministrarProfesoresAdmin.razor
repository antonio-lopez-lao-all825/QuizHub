@page "/admin/profesores"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject UserManager<ApplicationUser> UserManager

<div class="profile-page">
    <div class="page-header">
        <div class="header-content">
            <div class="header-icon">
                <i class="fa-solid fa-chalkboard-teacher"></i>
                <div class="icon-ring"></div>
            </div>
            <h1>Administración de Profesores</h1>
            <p>Gestiona los profesores y sus asignaturas</p>
        </div>
    </div>

    <div class="profile-card">
        <div class="actions-top">
            <button @onclick="ShowAddProfesorModal" class="btn-action">
                <i class="fas fa-plus"></i>
                <span>Nuevo Profesor</span>
            </button>
        </div>

        @if (!profesores.Any())
        {
            <div class="empty-state">
                <i class="fas fa-chalkboard-teacher"></i>
                <h3>No hay profesores</h3>
                <p>Añade profesores usando el botón "Nuevo Profesor"</p>
            </div>
        }
        else
        {
            <div class="teachers-list">
                @foreach (var profesor in profesores)
                {
                    <div class="teacher-card">
                        <div class="teacher-header" @onclick="@(() => ToggleProfesor(profesor.Id))">
                            <div class="teacher-info">
                                <div class="teacher-name">@profesor.UserName</div>
                                <div class="teacher-email">@profesor.Email</div>
                                <div class="teacher-stats">
                                    <div class="stat-item">
                                        <i class="fas fa-book"></i>
                                        <span>@GetTotalAsignaturas(profesor.Id) asignaturas</span>
                                    </div>
                                </div>
                            </div>
                            <div class="toggle-icon">
                                <i class="fas @(expandedProfesores.ContainsKey(profesor.Id) && expandedProfesores[profesor.Id] ? "fa-chevron-up" : "fa-chevron-down")"></i>
                            </div>
                        </div>

                        @if (expandedProfesores.ContainsKey(profesor.Id) && expandedProfesores[profesor.Id])
                        {
                            <div class="teacher-content">
                                <h6 class="content-title">
                                    <i class="fas fa-book"></i>
                                    Asignaturas asignadas
                                </h6>

                                @if (GetAsignaturasProfesor(profesor.Id).Any())
                                {
                                    <div class="subjects-list">
                                        @foreach (var asignatura in GetAsignaturasProfesor(profesor.Id))
                                        {
                                            <div class="subject-item">
                                                <span class="subject-name">
                                                    <i class="fas fa-graduation-cap"></i>
                                                    @asignatura.Name
                                                </span>
                                                <button @onclick="@(() => RemoveAsignatura(profesor.Id, asignatura.Id))" 
                                                        class="btn-remove">
                                                    <i class="fas fa-times"></i>
                                                    <span>Eliminar</span>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="empty-state">
                                        <i class="fas fa-book-open"></i>
                                        <p>No hay asignaturas asignadas</p>
                                    </div>
                                }

                                <div class="assign-subject">
                                    <select class="form-control" @bind="selectedAsignaturaId">
                                        <option value="0">Seleccionar asignatura</option>
                                        @foreach (var asignatura in asignaturas)
                                        {
                                            <option value="@asignatura.Id">@asignatura.Name</option>
                                        }
                                    </select>
                                    <button @onclick="@(() => AssignAsignatura(profesor.Id))"
                                            class="btn-assign"
                                            disabled="@(selectedAsignaturaId == 0)">
                                        <i class="fas fa-plus"></i>
                                        <span>Asignar</span>
                                    </button>
                                </div>

                                <div class="teacher-actions">
                                    <button @onclick="@(() => DeleteProfesor(profesor.Id))" class="btn-delete">
                                        <i class="fas fa-trash"></i>
                                        <span>Eliminar Profesor</span>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>

@if (showAddProfesorModal)
{
    <div class="modal-overlay">
        <div class="modal-container">
            <div class="modal-content">
                <div class="modal-header">
                    <h5>
                        <i class="fas fa-user-plus"></i>
                        Nuevo Profesor
                    </h5>
                    <button type="button" class="close-button" @onclick="CloseAddProfesorModal">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(modalMessage))
                    {
                        <div class="alert @(modalSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show">
                            <i class="@(modalSuccess ? "fas fa-check-circle" : "fas fa-exclamation-circle")"></i>
                            <span>@modalMessage</span>
                        </div>
                    }
                    <div class="form-group">
                        <label>Email</label>
                        <div class="input-with-icon">
                            <i class="fas fa-envelope"></i>
                            <input @bind="newProfesorEmail" class="form-control" placeholder="email@ejemplo.com" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Contraseña</label>
                        <div class="input-with-icon">
                            <i class="fas fa-lock"></i>
                            <input @bind="newProfesorPassword" type="password" class="form-control" placeholder="Contraseña segura" />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button @onclick="AddProfesor" class="btn-save" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <i class="fas fa-spinner fa-spin"></i>
                            <span>Procesando...</span>
                        }
                        else
                        {
                            <i class="fas fa-save"></i>
                            <span>Guardar</span>
                        }
                    </button>
                    <button @onclick="CloseAddProfesorModal" class="btn-cancel" disabled="@isProcessing">
                        <i class="fas fa-times"></i>
                        <span>Cancelar</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ApplicationUser> profesores = new List<ApplicationUser>();
    private List<Asignatura> asignaturas = new List<Asignatura>();
    private Dictionary<string, bool> expandedProfesores = new Dictionary<string, bool>();
    private int selectedAsignaturaId = 0;
    private bool showAddProfesorModal = false;
    private string newProfesorEmail = string.Empty;
    private string newProfesorPassword = string.Empty;
    private string modalMessage = string.Empty;
    private bool modalSuccess = false;
    private bool isProcessing = false;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();

        // Cargar profesores
        var role = await context.Roles.FirstOrDefaultAsync(r => r.Name == "Profesor");
        if (role != null)
        {
            var userRoles = await context.UserRoles
                .Where(ur => ur.RoleId == role.Id)
                .ToListAsync();

            var userIds = userRoles.Select(ur => ur.UserId).ToList();
            profesores = await context.Users
                .Where(u => userIds.Contains(u.Id))
                .ToListAsync();

            foreach (var profesor in profesores)
            {
                expandedProfesores[profesor.Id] = false;
            }
        }

        // Cargar asignaturas
        asignaturas = await context.asignaturas.ToListAsync();
    }

    private List<Asignatura> GetAsignaturasProfesor(string userId)
    {
        using var context = DbContextFactory.CreateDbContext();
        return context.asignaturasUsuario
            .Where(au => au.IdUsuario == userId)
            .Join(context.asignaturas,
                au => au.IdAsignatura,
                a => a.Id,
                (au, a) => a)
            .ToList();
    }

    private int GetTotalAsignaturas(string userId)
    {
        using var context = DbContextFactory.CreateDbContext();
        return context.asignaturasUsuario.Count(au => au.IdUsuario == userId);
    }

    private async Task AssignAsignatura(string userId)
    {
        if (selectedAsignaturaId > 0)
        {
            using var context = DbContextFactory.CreateDbContext();

            try 
            {
                var exists = await context.asignaturasUsuario
                    .AnyAsync(au => au.IdUsuario == userId && au.IdAsignatura == selectedAsignaturaId);

                if (!exists)
                {
                    context.asignaturasUsuario.Add(new AsignaturasUsuario
                        {
                            IdUsuario = userId,
                            IdAsignatura = selectedAsignaturaId
                        });

                    await context.SaveChangesAsync();
                    selectedAsignaturaId = 0;
                    StateHasChanged();
                }
                else
                {
                    // Mostrar mensaje de que ya existe la asignación
                    modalMessage = "Esta asignatura ya está asignada al profesor";
                    modalSuccess = false;
                }
            }
            catch (Exception ex)
            {
                modalMessage = "Error al asignar la asignatura: " + ex.Message;
                modalSuccess = false;
            }
        }
    }

    private async Task RemoveAsignatura(string userId, int asignaturaId)
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();
            var asignaturaUsuario = await context.asignaturasUsuario
                .FirstOrDefaultAsync(au => au.IdUsuario == userId && au.IdAsignatura == asignaturaId);

            if (asignaturaUsuario != null)
            {
                context.asignaturasUsuario.Remove(asignaturaUsuario);
                await context.SaveChangesAsync();
                modalSuccess = true;
                modalMessage = "Asignatura removida exitosamente";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            modalSuccess = false;
            modalMessage = "Error al remover la asignatura: " + ex.Message;
            StateHasChanged();
        }
    }

    private async Task DeleteProfesor(string id)
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();
            var profesor = await context.Users.FindAsync(id);

            if (profesor != null)
            {
                // Eliminar relaciones
                var relaciones = await context.asignaturasUsuario
                    .Where(au => au.IdUsuario == id)
                    .ToListAsync();

                context.asignaturasUsuario.RemoveRange(relaciones);
                context.Users.Remove(profesor);

                await context.SaveChangesAsync();
                profesores.RemoveAll(p => p.Id == id);
                expandedProfesores.Remove(id);
                
                modalSuccess = true;
                modalMessage = "Profesor eliminado exitosamente";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            modalSuccess = false;
            modalMessage = "Error al eliminar el profesor: " + ex.Message;
            StateHasChanged();
        }
    }

    private void ToggleProfesor(string profesorId)
    {
        if (expandedProfesores.ContainsKey(profesorId))
        {
            expandedProfesores[profesorId] = !expandedProfesores[profesorId];
            StateHasChanged();
        }
    }

    private void ShowAddProfesorModal() => showAddProfesorModal = true;

    private void CloseAddProfesorModal()
    {
        showAddProfesorModal = false;
        newProfesorEmail = string.Empty;
        newProfesorPassword = string.Empty;
        modalMessage = string.Empty;
        modalSuccess = false;
        isProcessing = false;
    }

    private async Task AddProfesor()
    {
        if (string.IsNullOrWhiteSpace(newProfesorEmail) || string.IsNullOrWhiteSpace(newProfesorPassword))
        {
            modalMessage = "Por favor, complete todos los campos";
            modalSuccess = false;
            return;
        }

        isProcessing = true;
        modalMessage = string.Empty;

        try
        {
            var user = new ApplicationUser
            {
                UserName = newProfesorEmail,
                Email = newProfesorEmail,
                EmailConfirmed = true
            };

            var result = await UserManager.CreateAsync(user, newProfesorPassword);

            if (result.Succeeded)
            {
                await UserManager.AddToRoleAsync(user, "Profesor");
                profesores.Add(user);
                expandedProfesores[user.Id] = false;
                modalSuccess = true;
                modalMessage = "Profesor creado exitosamente";
                await Task.Delay(1500); // Mostrar mensaje de éxito por 1.5 segundos
                CloseAddProfesorModal();
                StateHasChanged();
            }
            else
            {
                modalSuccess = false;
                modalMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            modalSuccess = false;
            modalMessage = "Error al crear el profesor: " + ex.Message;
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }
}
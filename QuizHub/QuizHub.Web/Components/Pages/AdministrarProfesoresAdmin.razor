@page "/admin/profesores"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject UserManager<ApplicationUser> UserManager

<style>
    .admin-container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 2rem 1rem;
    }

    .admin-card {
        background: #ffffff;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        margin-bottom: 1.5rem;
        overflow: hidden;
        transition: transform 0.2s ease;
    }

        .admin-card:hover {
            transform: translateY(-2px);
        }

    .card-header {
        padding: 1.5rem;
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: #f8f9fa;
        border-bottom: 1px solid #eee;
    }

    .card-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #2d3748;
        margin-bottom: 0.25rem;
    }

    .card-subtitle {
        font-size: 0.9rem;
        color: #718096;
    }

    .metadata-grid {
        display: flex;
        gap: 1.5rem;
        margin-top: 1rem;
    }

    .metadata-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.9rem;
        color: #4a5568;
    }

    .content-section {
        padding: 1.5rem;
        background: #f8fafc;
    }

    .list-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem;
        margin: 0.5rem 0;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .selector-grid {
        display: grid;
        grid-template-columns: 1fr auto;
        gap: 1rem;
        margin-top: 1.5rem;
    }

    .admin-title {
        font-size: 2rem;
        font-weight: 500; /* Reducido para hacerlo más fino */
        text-align: center;
        margin: 2rem 0 3rem;
        color: #000; /* Negro */
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
    }

    .search-bar {
        width: 100%;
        max-width: 400px;
        margin: 0 auto 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .search-bar input {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ccc;
            border-radius: 8px;
        }

    .empty-state {
        text-align: center;
        padding: 2rem;
        color: #a0aec0;
        font-style: italic;
    }

    .btn-icon {
        padding: 0.6rem 1rem;
        border-radius: 8px;
        transition: all 0.2s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

        .btn-icon i {
            font-size: 0.9rem;
        }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 2rem;
        border-radius: 12px;
        width: 100%;
        max-width: 500px;
    }
</style>

<div class="admin-container">
    <h1 class="admin-title">
        <i class="fas fa-chalkboard-teacher"></i>
        Administración de Profesores
    </h1>

    <button @onclick="ShowAddProfesorModal" class="btn btn-primary btn-icon mb-4">
        <i class="fas fa-plus"></i> Nuevo Profesor
    </button>

    @foreach (var profesor in profesores)
    {
        <div class="admin-card">
            <div class="card-header" @onclick="@(() => ToggleProfesor(profesor.Id))">
                <div>
                    <div class="card-title">@profesor.UserName</div>
                    <div class="card-subtitle">@profesor.Email</div>
                    <div class="metadata-grid">
                        <div class="metadata-item">
                            <i class="fas fa-book"></i>
                            @GetTotalAsignaturas(profesor.Id) asignaturas
                        </div>

                    </div>
                </div>
                <i class="fas @(expandedProfesores.ContainsKey(profesor.Id) && expandedProfesores[profesor.Id] ? "fa-chevron-up" : "fa-chevron-down")"></i>
            </div>

            @if (expandedProfesores.ContainsKey(profesor.Id) && expandedProfesores[profesor.Id])
            {
                <div class="content-section">
                    <h6>Asignaturas asignadas:</h6>

                    @if (GetAsignaturasProfesor(profesor.Id).Any())
                    {
                        @foreach (var asignatura in GetAsignaturasProfesor(profesor.Id))
                        {
                            <div class="list-item">
                                <span>@asignatura.Name</span>
                                <button @onclick="@(() => RemoveAsignatura(profesor.Id, asignatura.Id))"
                                        class="btn btn-sm btn-danger btn-icon">
                                    <i class="fas fa-times"></i> Eliminar
                                </button>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="empty-state">
                            <i class="fas fa-book-open fa-2x mb-2"></i>
                            <div>No hay asignaturas asignadas</div>
                        </div>
                    }

                    <div class="selector-grid">
                        <select class="form-control" @bind="selectedAsignaturaId">
                            <option value="0">Seleccionar asignatura</option>
                            @foreach (var asignatura in asignaturas)
                            {
                                <option value="@asignatura.Id">@asignatura.Name</option>
                            }
                        </select>
                        <button @onclick="@(() => AssignAsignatura(profesor.Id))"
                                class="btn btn-success btn-icon"
                                disabled="@(selectedAsignaturaId == 0)">
                            <i class="fas fa-link"></i> Asignar
                        </button>
                    </div>

                    <div class="mt-3 text-right">
                        <button @onclick="@(() => DeleteProfesor(profesor.Id))"
                                class="btn btn-danger btn-icon">
                            <i class="fas fa-trash"></i> Eliminar Profesor
                        </button>
                    </div>
                </div>
            }
        </div>
    }
</div>

@if (showAddProfesorModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header mb-3">
                <h3 class="card-title">Nuevo Profesor</h3>
                <button @onclick="CloseAddProfesorModal" class="btn btn-sm btn-close">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="form-group">
                <label>Correo electrónico</label>
                <input @bind="newProfesorEmail" class="form-control mb-2" />
            </div>
            <div class="form-group">
                <label>Contraseña</label>
                <input @bind="newProfesorPassword" type="password" class="form-control" />
            </div>
            <div class="mt-4 text-right">
                <button @onclick="AddProfesor" class="btn btn-primary btn-icon">
                    <i class="fas fa-save"></i> Guardar
                </button>
                <button @onclick="CloseAddProfesorModal" class="btn btn-secondary btn-icon ml-2">
                    <i class="fas fa-times"></i> Cancelar
                </button>
            </div>
        </div>
    </div>
}

@code {
    private List<ApplicationUser> profesores = new List<ApplicationUser>();
    private List<Asignatura> asignaturas = new List<Asignatura>();
    private Dictionary<string, bool> expandedProfesores = new Dictionary<string, bool>();
    private int selectedAsignaturaId = 0;
    private bool showAddProfesorModal = false;
    private string newProfesorEmail = string.Empty;
    private string newProfesorPassword = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();

        // Cargar profesores
        var role = await context.Roles.FirstOrDefaultAsync(r => r.Name == "Profesor");
        if (role != null)
        {
            var userRoles = await context.UserRoles
                .Where(ur => ur.RoleId == role.Id)
                .ToListAsync();

            var userIds = userRoles.Select(ur => ur.UserId).ToList();
            profesores = await context.Users
                .Where(u => userIds.Contains(u.Id))
                .ToListAsync();

            foreach (var profesor in profesores)
            {
                expandedProfesores[profesor.Id] = false;
            }
        }

        // Cargar asignaturas
        asignaturas = await context.asignaturas.ToListAsync();
    }

    private List<Asignatura> GetAsignaturasProfesor(string userId)
    {
        using var context = DbContextFactory.CreateDbContext();
        return context.asignaturasUsuario
            .Where(au => au.IdUsuario == userId)
            .Join(context.asignaturas,
                au => au.IdAsignatura,
                a => a.Id,
                (au, a) => a)
            .ToList();
    }

    private int GetTotalAsignaturas(string userId)
    {
        using var context = DbContextFactory.CreateDbContext();
        return context.asignaturasUsuario.Count(au => au.IdUsuario == userId);
    }

    private async Task AssignAsignatura(string userId)
    {
        if (selectedAsignaturaId > 0)
        {
            using var context = DbContextFactory.CreateDbContext();

            var exists = await context.asignaturasUsuario
                .AnyAsync(au => au.IdUsuario == userId && au.IdAsignatura == selectedAsignaturaId);

            if (!exists)
            {
                context.asignaturasUsuario.Add(new AsignaturasUsuario
                    {
                        IdUsuario = userId,
                        IdAsignatura = selectedAsignaturaId
                    });

                await context.SaveChangesAsync();
                selectedAsignaturaId = 0;
                StateHasChanged();
            }
        }
    }

    private async Task RemoveAsignatura(string userId, int asignaturaId)
    {
        using var context = DbContextFactory.CreateDbContext();
        var asignaturaUsuario = await context.asignaturasUsuario
            .FirstOrDefaultAsync(au => au.IdUsuario == userId && au.IdAsignatura == asignaturaId);

        if (asignaturaUsuario != null)
        {
            context.asignaturasUsuario.Remove(asignaturaUsuario);
            await context.SaveChangesAsync();
            StateHasChanged();
        }
    }

    private async Task DeleteProfesor(string id)
    {
        using var context = DbContextFactory.CreateDbContext();
        var profesor = await context.Users.FindAsync(id);

        if (profesor != null)
        {
            var relaciones = await context.asignaturasUsuario
                .Where(au => au.IdUsuario == id)
                .ToListAsync();

            context.asignaturasUsuario.RemoveRange(relaciones);
            context.Users.Remove(profesor);

            await context.SaveChangesAsync();
            profesores.RemoveAll(p => p.Id == id);
            expandedProfesores.Remove(id);
            StateHasChanged();
        }
    }

    private void ToggleProfesor(string profesorId)
    {
        if (expandedProfesores.ContainsKey(profesorId))
        {
            expandedProfesores[profesorId] = !expandedProfesores[profesorId];
            StateHasChanged();
        }
    }

    private void ShowAddProfesorModal() => showAddProfesorModal = true;

    private void CloseAddProfesorModal()
    {
        showAddProfesorModal = false;
        newProfesorEmail = string.Empty;
        newProfesorPassword = string.Empty;
    }

    private async Task AddProfesor()
    {
        var user = new ApplicationUser
            {
                UserName = newProfesorEmail,
                Email = newProfesorEmail,
                EmailConfirmed = true,
            };

        var result = await UserManager.CreateAsync(user, newProfesorPassword);

        if (result.Succeeded)
        {
            await UserManager.AddToRoleAsync(user, "Profesor");
            profesores.Add(user);
            expandedProfesores[user.Id] = false;
            CloseAddProfesorModal();
            StateHasChanged();
        }
    }
}
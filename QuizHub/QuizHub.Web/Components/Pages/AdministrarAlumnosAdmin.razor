@page "/admin/alumnos"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject UserManager<ApplicationUser> UserManager

<div class="profile-page">
    <div class="page-header">
        <div class="header-content">
            <div class="header-icon">
                <i class="fa-solid fa-user-graduate"></i>
                <div class="icon-ring"></div>
            </div>
            <h1>Administración de Alumnos</h1>
            <p>Gestiona los alumnos de la plataforma</p>
        </div>
    </div>

    <div class="profile-card">
        <div class="actions-top">
            <button @onclick="ShowAddAlumnoModal" class="btn-action">
                <i class="fas fa-plus"></i>
                <span>Nuevo Alumno</span>
            </button>
        </div>

        @if (!alumnos.Any())
        {
            <div class="empty-state">
                <i class="fas fa-user-graduate"></i>
                <h3>No hay alumnos</h3>
                <p>Añade alumnos usando el botón "Nuevo Alumno"</p>
            </div>
        }
        else
        {
            <div class="students-list">
                @foreach (var alumno in alumnos)
                {
                    <div class="student-card">
                        <div class="student-header" @onclick="@(() => ToggleAlumno(alumno.Id))">
                            <div class="student-info">
                                <div class="student-name">@alumno.UserName</div>
                                <div class="student-email">@alumno.Email</div>
                            </div>
                            <div class="toggle-icon">
                                <i class="fas @(expandedAlumnos.ContainsKey(alumno.Id) && expandedAlumnos[alumno.Id] ? "fa-chevron-up" : "fa-chevron-down")"></i>
                            </div>
                        </div>

                        @if (expandedAlumnos.ContainsKey(alumno.Id) && expandedAlumnos[alumno.Id])
                        {
                            <div class="student-content">
                                <h6 class="content-title">
                                    <i class="fas fa-history"></i>
                                    Historial de Cuestionarios
                                </h6>

                                @if (GetPuntuaciones(alumno.Id).Any())
                                {
                                    <div class="scores-list">
                                        @foreach (var puntuacion in GetPuntuaciones(alumno.Id))
                                        {
                                            <div class="score-item">
                                                <span class="quiz-info">
                                                    <i class="fas fa-file-alt"></i>
                                                    @puntuacion.CuestionarioName
                                                    <span class="subject">(@puntuacion.AsignaturaName)</span>
                                                </span>
                                                <span class="score-badge">@puntuacion.puntuacion Puntos</span>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="empty-state">
                                        <i class="fas fa-book-open"></i>
                                        <p>No hay cuestionarios completados</p>
                                    </div>
                                }

                                <div class="student-actions">
                                    <button @onclick="@(() => DeleteAlumno(alumno.Id))" class="btn-delete">
                                        <i class="fas fa-trash"></i>
                                        <span>Eliminar Alumno</span>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>

@if (showAddAlumnoModal)
{
    <div class="modal-overlay">
        <div class="modal-container">
            <div class="modal-content">
                <div class="modal-header">
                    <h5>
                        <i class="fas fa-user-plus"></i>
                        Nuevo Alumno
                    </h5>
                    <button type="button" class="close-button" @onclick="CloseAddAlumnoModal">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(modalMessage))
                    {
                        <div class="alert @(modalSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show">
                            <i class="@(modalSuccess ? "fas fa-check-circle" : "fas fa-exclamation-circle")"></i>
                            <span>@modalMessage</span>
                        </div>
                    }
                    <div class="form-group">
                        <label>Email</label>
                        <div class="input-with-icon">
                            <i class="fas fa-envelope"></i>
                            <input @bind="newAlumnoEmail" class="form-control" placeholder="email@ejemplo.com" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Contraseña</label>
                        <div class="input-with-icon">
                            <i class="fas fa-lock"></i>
                            <input @bind="newAlumnoPassword" type="password" class="form-control" placeholder="Contraseña segura" />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button @onclick="AddAlumno" class="btn-save" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <i class="fas fa-spinner fa-spin"></i>
                            <span>Procesando...</span>
                        }
                        else
                        {
                            <i class="fas fa-save"></i>
                            <span>Guardar</span>
                        }
                    </button>
                    <button @onclick="CloseAddAlumnoModal" class="btn-cancel" disabled="@isProcessing">
                        <i class="fas fa-times"></i>
                        <span>Cancelar</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ApplicationUser> alumnos = new List<ApplicationUser>();
    private List<Asignatura> asignaturas = new List<Asignatura>();
    private Dictionary<string, bool> expandedAlumnos = new Dictionary<string, bool>();
    private int selectedAsignaturaId = 0;
    private bool showAddAlumnoModal = false;
    private string newAlumnoEmail = string.Empty;
    private string newAlumnoPassword = string.Empty;
    private string modalMessage = string.Empty;
    private bool modalSuccess = false;
    private bool isProcessing = false;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();

        // Cargar alumnos (usuarios con rol "Alumno")
        var role = await context.Roles.FirstOrDefaultAsync(r => r.Name == "Alumno");
        if (role != null)
        {
            var userRoles = await context.UserRoles
                .Where(ur => ur.RoleId == role.Id)
                .ToListAsync();

            var userIds = userRoles.Select(ur => ur.UserId).ToList();
            alumnos = await context.Users
                .Where(u => userIds.Contains(u.Id))
                .ToListAsync();

            foreach (var alumno in alumnos)
            {
                expandedAlumnos[alumno.Id] = false;
            }
        }

        asignaturas = await context.asignaturas.ToListAsync();
    }

    private List<Asignatura> GetAsignaturasAlumno(string userId)
    {
        using var context = DbContextFactory.CreateDbContext();
        return context.asignaturasUsuario
            .Where(au => au.IdUsuario == userId)
            .Join(context.asignaturas,
                au => au.IdAsignatura,
                a => a.Id,
                (au, a) => a)
            .ToList();
    }

    private List<PuntuacionInfo> GetPuntuaciones(string userId)
    {
        using var context = DbContextFactory.CreateDbContext();
        return context.puntuacion
            .Where(p => p.IdUsuario == userId)
            .Join(context.cuestionarios,
                p => p.IdCuestionario,
                c => c.Id,
                (p, c) => new { p, c })
            .Join(context.asignaturas,
                pc => pc.c.Asignatura,
                a => a.Name,
                (pc, a) => new PuntuacionInfo
                    {
                        CuestionarioName = pc.c.Name,
                        AsignaturaName = a.Name,
                        puntuacion = pc.p.puntuacion
                    })
            .ToList();
    }

    private async Task AssignAsignatura(string userId)
    {
        if (selectedAsignaturaId > 0)
        {
            using var context = DbContextFactory.CreateDbContext();

            var exists = await context.asignaturasUsuario
                .AnyAsync(au => au.IdUsuario == userId && au.IdAsignatura == selectedAsignaturaId);

            if (!exists)
            {
                context.asignaturasUsuario.Add(new AsignaturasUsuario
                    {
                        IdUsuario = userId,
                        IdAsignatura = selectedAsignaturaId
                    });

                await context.SaveChangesAsync();
                selectedAsignaturaId = 0;
                StateHasChanged();
            }
        }
    }

    private async Task RemoveAsignatura(string userId, int asignaturaId)
    {
        using var context = DbContextFactory.CreateDbContext();
        var asignaturaUsuario = await context.asignaturasUsuario
            .FirstOrDefaultAsync(au => au.IdUsuario == userId && au.IdAsignatura == asignaturaId);

        if (asignaturaUsuario != null)
        {
            context.asignaturasUsuario.Remove(asignaturaUsuario);
            await context.SaveChangesAsync();
            StateHasChanged();
        }
    }

    private async Task DeleteAlumno(string id)
    {
        using var context = DbContextFactory.CreateDbContext();
        var alumno = await context.Users.FindAsync(id);

        if (alumno != null)
        {
            // Eliminar relaciones
            var relaciones = await context.asignaturasUsuario
                .Where(au => au.IdUsuario == id)
                .ToListAsync();

            var puntuaciones = await context.puntuacion
                .Where(p => p.IdUsuario == id)
                .ToListAsync();

            context.asignaturasUsuario.RemoveRange(relaciones);
            context.puntuacion.RemoveRange(puntuaciones);
            context.Users.Remove(alumno);

            await context.SaveChangesAsync();
            alumnos.RemoveAll(a => a.Id == id);
            expandedAlumnos.Remove(id);
            StateHasChanged();
        }
    }

    private void ToggleAlumno(string alumnoId)
    {
        if (expandedAlumnos.ContainsKey(alumnoId))
        {
            expandedAlumnos[alumnoId] = !expandedAlumnos[alumnoId];
            StateHasChanged();
        }
    }

    private void ShowAddAlumnoModal() => showAddAlumnoModal = true;

    private void CloseAddAlumnoModal()
    {
        showAddAlumnoModal = false;
        newAlumnoEmail = string.Empty;
        newAlumnoPassword = string.Empty;
        modalMessage = string.Empty;
        modalSuccess = false;
        isProcessing = false;
    }

    private async Task AddAlumno()
    {
        if (string.IsNullOrWhiteSpace(newAlumnoEmail) || string.IsNullOrWhiteSpace(newAlumnoPassword))
        {
            modalMessage = "Por favor, complete todos los campos";
            modalSuccess = false;
            return;
        }

        isProcessing = true;
        modalMessage = string.Empty;

        try
        {
            var user = new ApplicationUser
            {
                UserName = newAlumnoEmail,
                Email = newAlumnoEmail,
                EmailConfirmed = true
            };

            var result = await UserManager.CreateAsync(user, newAlumnoPassword);

            if (result.Succeeded)
            {
                await UserManager.AddToRoleAsync(user, "Alumno");
                alumnos.Add(user);
                expandedAlumnos[user.Id] = false;
                modalSuccess = true;
                modalMessage = "Alumno creado exitosamente";
                await Task.Delay(1500); // Mostrar mensaje de éxito por 1.5 segundos
                CloseAddAlumnoModal();
                StateHasChanged();
            }
            else
            {
                modalSuccess = false;
                modalMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            modalSuccess = false;
            modalMessage = "Error al crear el alumno: " + ex.Message;
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private class PuntuacionInfo
    {
        public string CuestionarioName { get; set; }
        public string AsignaturaName { get; set; }
        public int puntuacion { get; set; }
    }
}
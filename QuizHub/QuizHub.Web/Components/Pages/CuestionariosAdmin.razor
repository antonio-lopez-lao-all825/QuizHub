@page "/admin/cuestionarios"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory

<div class="profile-page">
    <div class="page-header">
        <div class="header-content">
            <div class="header-icon">
                <i class="fa-solid fa-clipboard-list"></i>
                <div class="icon-ring"></div>
            </div>
            <h1>Administración de Cuestionarios</h1>
            <p>Gestiona y monitorea los cuestionarios</p>
        </div>
    </div>

    <div class="profile-card">
        @if (!string.IsNullOrEmpty(modalMessage))
        {
            <div class="alert @(modalSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show">
                <i class="@(modalSuccess ? "fas fa-check-circle" : "fas fa-exclamation-circle")"></i>
                <span>@modalMessage</span>
            </div>
        }

        @if (!cuestionarios.Any())
        {
            <div class="empty-state">
                <i class="fas fa-clipboard-question"></i>
                <h3>No hay cuestionarios</h3>
                <p>Aún no se han creado cuestionarios en el sistema</p>
            </div>
        }
        else
        {
            <div class="quizzes-list">
                @foreach (var cuestionario in cuestionarios)
                {
                    <div class="quiz-card">
                        <div class="quiz-header" @onclick="@(() => ToggleCuestionario(cuestionario.Id))">
                            <div class="quiz-info">
                                <div class="quiz-title">@cuestionario.Name</div>
                                <div class="quiz-metadata">
                                    <div class="metadata-item">
                                        <i class="fas fa-book"></i>
                                        <span class="subject-tag">
                                            @(GetNombreAsignatura(cuestionario.Asignatura) ?? "Sin asignatura")
                                        </span>
                                    </div>
                                    <div class="metadata-item">
                                        <i class="fas fa-user-tie"></i>
                                        <span>@(GetProfesorName(cuestionario.IdUsuario) ?? "Profesor no encontrado")</span>
                                    </div>
                                    <div class="metadata-item">
                                        <i class="fas fa-users"></i>
                                        <span>@GetTotalAlumnos(cuestionario.Id) alumnos</span>
                                    </div>
                                </div>
                            </div>
                            <div class="toggle-icon">
                                <i class="fas @(expandedCuestionarios.ContainsKey(cuestionario.Id) && expandedCuestionarios[cuestionario.Id] ? "fa-chevron-up" : "fa-chevron-down")"></i>
                            </div>
                        </div>

                        @if (expandedCuestionarios.ContainsKey(cuestionario.Id) && expandedCuestionarios[cuestionario.Id])
                        {
                            <div class="quiz-content">
                                @if (HasResultados(cuestionario.Id))
                                {
                                    <div class="stats-grid">
                                        <div class="stat-box">
                                            <div class="stat-value">@GetPromedio(cuestionario.Id).ToString("F1")</div>
                                            <div class="stat-label">Promedio</div>
                                        </div>
                                        <div class="stat-box">
                                            <div class="stat-value">@GetMaxima(cuestionario.Id)</div>
                                            <div class="stat-label">Máxima</div>
                                        </div>
                                        <div class="stat-box">
                                            <div class="stat-value">@GetMinima(cuestionario.Id)</div>
                                            <div class="stat-label">Mínima</div>
                                        </div>
                                        <div class="stat-box">
                                            <div class="stat-value">@GetModa(cuestionario.Id)</div>
                                            <div class="stat-label">Moda</div>
                                        </div>
                                    </div>

                                    <div class="progress-section">
                                        <div class="progress-info">
                                            <span>Aprobados: @GetAprobados(cuestionario.Id)</span>
                                            <span>@GetPorcentajeAprobados(cuestionario.Id)%</span>
                                            <span>Suspensos: @GetReprobados(cuestionario.Id)</span>
                                        </div>
                                        <div class="progress-bar">
                                            <div class="progress-fill" style="width: @(GetPorcentajeAprobados(cuestionario.Id))%"></div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="empty-state">
                                        <i class="fas fa-chart-bar"></i>
                                        <p>Ningún alumno ha realizado este cuestionario</p>
                                    </div>
                                }

                                <div class="quiz-actions">
                                    <button @onclick="@(() => DeleteCuestionario(cuestionario.Id))" class="btn-delete">
                                        <i class="fas fa-trash"></i>
                                        <span>Eliminar Cuestionario</span>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<Cuestionario> cuestionarios = new List<Cuestionario>();
    private Dictionary<int, bool> expandedCuestionarios = new Dictionary<int, bool>();
    private List<ApplicationUser> profesores = new List<ApplicationUser>();
    private List<Asignatura> asignaturas = new List<Asignatura>();
    private string modalMessage = string.Empty;
    private bool modalSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        cuestionarios = await context.cuestionarios.ToListAsync();
        profesores = await context.Users.ToListAsync();
        asignaturas = await context.asignaturas.ToListAsync();

        foreach (var c in cuestionarios)
        {
            expandedCuestionarios[c.Id] = false;
        }
    }

    private string GetProfesorName(string userId)
    {
        return profesores.FirstOrDefault(p => p.Id == userId)?.UserName;
    }

    private string GetNombreAsignatura(string nombreAsignatura)
    {
        return asignaturas.FirstOrDefault(a => a.Name == nombreAsignatura)?.Name;
    }

    private int GetTotalAlumnos(int cuestionarioId)
    {
        using var context = DbContextFactory.CreateDbContext();
        return context.puntuacion.Count(p => p.IdCuestionario == cuestionarioId);
    }

    private double GetPromedio(int cuestionarioId)
    {
        using var context = DbContextFactory.CreateDbContext();
        return context.puntuacion
            .Where(p => p.IdCuestionario == cuestionarioId)
            .Average(p => (double?)p.puntuacion) ?? 0.0;
    }

    private int GetMaxima(int cuestionarioId)
    {
        using var context = DbContextFactory.CreateDbContext();
        return context.puntuacion
            .Where(p => p.IdCuestionario == cuestionarioId)
            .Max(p => (int?)p.puntuacion) ?? 0;
    }

    private int GetMinima(int cuestionarioId)
    {
        using var context = DbContextFactory.CreateDbContext();
        return context.puntuacion
            .Where(p => p.IdCuestionario == cuestionarioId)
            .Min(p => (int?)p.puntuacion) ?? 0;
    }

    private int GetModa(int cuestionarioId)
    {
        using var context = DbContextFactory.CreateDbContext();
        return context.puntuacion
            .Where(p => p.IdCuestionario == cuestionarioId)
            .GroupBy(p => p.puntuacion)
            .OrderByDescending(g => g.Count())
            .Select(g => g.Key)
            .FirstOrDefault();
    }

    private int GetAprobados(int cuestionarioId)
    {
        using var context = DbContextFactory.CreateDbContext();
        return context.puntuacion
            .Count(p => p.IdCuestionario == cuestionarioId && p.puntuacion >= 5);
    }

    private int GetReprobados(int cuestionarioId)
    {
        using var context = DbContextFactory.CreateDbContext();
        return context.puntuacion
            .Count(p => p.IdCuestionario == cuestionarioId && p.puntuacion < 5);
    }

    private double GetPorcentajeAprobados(int cuestionarioId)
    {
        var total = GetTotalAlumnos(cuestionarioId);
        if (total == 0) return 0;
        return Math.Round((GetAprobados(cuestionarioId) * 100.0) / total, 1);
    }

    private bool HasResultados(int cuestionarioId)
    {
        using var context = DbContextFactory.CreateDbContext();
        return context.puntuacion.Any(p => p.IdCuestionario == cuestionarioId);
    }

    private void ToggleCuestionario(int cuestionarioId)
    {
        expandedCuestionarios[cuestionarioId] = !expandedCuestionarios[cuestionarioId];
        StateHasChanged();
    }

    private async Task DeleteCuestionario(int cuestionarioId)
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();
            var cuestionario = await context.cuestionarios.FindAsync(cuestionarioId);

            if (cuestionario != null)
            {
                var relaciones = await context.preguntasCuestionario
                    .Where(pc => pc.IdCuestionario == cuestionarioId)
                    .ToListAsync();

                var puntuaciones = await context.puntuacion
                    .Where(p => p.IdCuestionario == cuestionarioId)
                    .ToListAsync();

                context.preguntasCuestionario.RemoveRange(relaciones);
                context.puntuacion.RemoveRange(puntuaciones);
                context.cuestionarios.Remove(cuestionario);

                await context.SaveChangesAsync();

                modalSuccess = true;
                modalMessage = "Cuestionario eliminado exitosamente";

                // Recargar todos los datos
                await RecargarDatos();
                
                StateHasChanged();
                
                await Task.Delay(1500);
                modalMessage = string.Empty;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            modalSuccess = false;
            modalMessage = "Error al eliminar el cuestionario: " + ex.Message;
            StateHasChanged();
        }
    }

    private async Task RecargarDatos()
    {
        using var context = DbContextFactory.CreateDbContext();
        cuestionarios = await context.cuestionarios.ToListAsync();
        profesores = await context.Users.ToListAsync();
        asignaturas = await context.asignaturas.ToListAsync();

        // Reiniciar el diccionario de estados expandidos
        expandedCuestionarios.Clear();
        foreach (var c in cuestionarios)
        {
            expandedCuestionarios[c.Id] = false;
        }
    }
}
@page "/Cuestionarios"
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext db
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Cuestionarios</PageTitle>

<div class="row">
    <div class="col-10">
        <h1>Cuestionarios</h1>
    </div>
    <div class="col-2 text-end">
        <button class="btn btn-primary" @onclick="AbrirModalCrearCuestionario">Añadir Cuestionario</button>
    </div>
</div>

@if (cuestionarios == null)
{
    <p><em>Cargando...</em></p>
}
else if (cuestionarios.Count == 0)
{
    <p>No se encontraron cuestionarios.</p>
}
else
{
    <table class="table mt-4">
        <thead>
            <tr>
                <th>Nombre del Cuestionario</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cuestionario in cuestionarios)
            {
                <tr>
                    <td>@cuestionario.Name</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => VerCuestionario(cuestionario.Id)">Ver</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarCuestionario(cuestionario.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Sección para mostrar las preguntas del cuestionario -->
<div class="modal fade" id="verPreguntasModal" tabindex="-1" aria-labelledby="verPreguntasModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="verPreguntasModalLabel">Preguntas del Cuestionario</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (preguntasDelCuestionario != null && preguntasDelCuestionario.Count > 0)
                {
                    <ul>
                        @foreach (var pregunta in preguntasDelCuestionario)
                        {
                            <li>@pregunta.Name</li>
                        }
                    </ul>
                }
                else
                {
                    <p>No hay preguntas asociadas a este cuestionario.</p>
                }
            </div>
        </div>
    </div>
</div>

<!-- Sección para crear el cuestionario -->
<div class="modal fade" id="crearCuestionarioModal" tabindex="-1" aria-labelledby="crearCuestionarioModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="crearCuestionarioModalLabel">Crear Cuestionario</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <label for="nombreCuestionario">Nombre del Cuestionario:</label>
                <InputText id="nombreCuestionario" @bind-Value="nombreCuestionario" class="form-control" required />

                <label class="mt-3">Seleccione las preguntas:</label>
                <div>
                    @foreach (var pregunta in preguntasAsignadasAlUsuario)
                    {
                        <div class="mb-2">
                            <input type="checkbox" @bind="preguntasSeleccionadas[pregunta.Id]" />
                            <span>@pregunta.Name</span>
                        </div>
                    }
                </div>

                <label class="mt-3">Seleccione la asignatura:</label>
                <div>
                    @foreach (var asignatura in asignaturasAsignadasAlUsuario)
                    {
                        <div class="mb-2">
                            <input type="checkbox" @bind="asignaturasSeleccionadas[asignatura.Id]" />
                            <span>@asignatura.Name</span>
                        </div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="CrearCuestionario">Añadir Cuestionario</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Cuestionario> cuestionarios = new();
    private List<Pregunta> preguntasAsignadasAlUsuario = new();
    private List<Asignatura> asignaturasAsignadasAlUsuario = new();
    private Dictionary<int, bool> preguntasSeleccionadas = new();
    private Dictionary<int, bool> asignaturasSeleccionadas = new();
    private string nombreCuestionario = string.Empty;
    private List<Pregunta> preguntasDelCuestionario = new();

    private async Task CargarCuestionariosAsync()
    {
        try
        {
            cuestionarios = await db.cuestionarios.AsNoTracking().ToListAsync();

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var usuario = authState.User;
            if (!usuario.Identity.IsAuthenticated)
            {
                return;
            }

            var usuarioId = usuario.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            preguntasAsignadasAlUsuario = await db.preguntas
                .Where(p => p.UserId == usuarioId)
                .ToListAsync();

            foreach (var pregunta in preguntasAsignadasAlUsuario)
            {
                if (!preguntasSeleccionadas.ContainsKey(pregunta.Id))
                {
                    preguntasSeleccionadas[pregunta.Id] = false;
                }
            }

            asignaturasAsignadasAlUsuario = await db.asignaturasUsuario
                .Where(a => a.IdUsuario == usuarioId)
                .Join(
                    db.asignaturas,
                    asignaturaUsuario => asignaturaUsuario.IdAsignatura,
                    asignatura => asignatura.Id,
                    (asignaturaUsuario, asignatura) => asignatura
                )
                .ToListAsync();

            foreach (var asignatura in asignaturasAsignadasAlUsuario)
            {
                if (!asignaturasSeleccionadas.ContainsKey(asignatura.Id))
                {
                    asignaturasSeleccionadas[asignatura.Id] = false;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error inesperado al cargar datos: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarCuestionariosAsync();
    }

    private async Task EliminarCuestionario(int id)
    {
        try
        {
            var cuestionario = await db.cuestionarios.FindAsync(id);
            if (cuestionario != null)
            {
                var preguntas = db.preguntasCuestionario.Where(pc => pc.IdCuestionario == id);

                db.preguntasCuestionario.RemoveRange(preguntas);
                db.cuestionarios.Remove(cuestionario);
                await db.SaveChangesAsync();

                cuestionarios.RemoveAll(c => c.Id == id);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar cuestionario: {ex.Message}");
        }
    }

    private async Task AbrirModalCrearCuestionario()
    {
        nombreCuestionario = string.Empty;
        await JSRuntime.InvokeVoidAsync("eval", @"new bootstrap.Modal(document.getElementById('crearCuestionarioModal')).show();");
    }

    private async Task VerCuestionario(int id)
    {
        preguntasDelCuestionario = await db.preguntas
            .Where(p => db.preguntasCuestionario.Any(pc => pc.IdCuestionario == id && pc.IdPregunta == p.Id))
            .ToListAsync();

        await JSRuntime.InvokeVoidAsync("eval", @"new bootstrap.Modal(document.getElementById('verPreguntasModal')).show();");
    }

    private async Task CrearCuestionario()
    {
        if (string.IsNullOrEmpty(nombreCuestionario))
        {
            Console.WriteLine("El nombre del cuestionario es obligatorio.");
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var usuario = authState.User;
        var usuarioId = usuario.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        string asignaturaSeleccionada = ObtenerAsignaturaSeleccionada();
        if (string.IsNullOrEmpty(asignaturaSeleccionada))
        {
            Console.WriteLine("Debe seleccionar una asignatura.");
            return;
        }

        var nuevoCuestionario = new Cuestionario
            {
                Name = nombreCuestionario,
                IdUsuario = usuarioId,
                Estado = 1,
                Asignatura = asignaturaSeleccionada
            };

        db.cuestionarios.Add(nuevoCuestionario);
        await db.SaveChangesAsync();

        Console.WriteLine("Cuestionario ID: " + nuevoCuestionario.Id);

        if (nuevoCuestionario.Id == 0)
        {
            Console.WriteLine("Error: El cuestionario no se guardó correctamente.");
            return;
        }

        var preguntasSeleccionadasIds = preguntasAsignadasAlUsuario
            .Where(p => preguntasSeleccionadas.ContainsKey(p.Id) && preguntasSeleccionadas[p.Id])
            .Select(p => p.Id)
            .ToList();

        var preguntasCuestionarios = preguntasSeleccionadasIds
            .Select(preguntaId => new PreguntasCuestionario
                {
                    IdCuestionario = nuevoCuestionario.Id,
                    IdPregunta = preguntaId
                })
            .ToList();

        db.preguntasCuestionario.AddRange(preguntasCuestionarios);
        await db.SaveChangesAsync();

        cuestionarios.Add(nuevoCuestionario);
        StateHasChanged();

        await JSRuntime.InvokeVoidAsync("eval", @"new bootstrap.Modal(document.getElementById('crearCuestionarioModal')).hide();");
    }

    private string ObtenerAsignaturaSeleccionada()
    {
        return asignaturasAsignadasAlUsuario
            .Where(a => asignaturasSeleccionadas[a.Id])
            .FirstOrDefault()?.Name;
    }
}

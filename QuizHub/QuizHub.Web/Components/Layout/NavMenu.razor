@implements IDisposable
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

<nav class="navbar">
    <div class="navbar-brand">
        <a href="">
            <span class="brand-icon">?</span>
            <span class="brand-text">QuizHub</span>
        </a>
    </div>

    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>

    <div class="nav-content @(collapseNavMenu ? "collapsed" : "expanded")">
        <div class="nav-links">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All" @onclick="CollapseMenu">
                <span class="bi bi-house-door-fill-nav-menu"></span> Inicio
            </NavLink>

            @if (isAuthenticated && isProfesor)
            {
                @* 
                <NavLink class="nav-link" href="preguntas">
                    <span class="bi bi-plus-square-fill-nav-menu"></span> Preguntas
                </NavLink>
                *@
                <NavLink class="nav-link" href="Asignaturas" @onclick="CollapseMenu">
                    <span class="bi bi-book-fill-nav-menu"></span> Asignaturas
                </NavLink>
                <NavLink class="nav-link" href="Cuestionarios" @onclick="CollapseMenu">
                    <span class="bi bi-file-text-fill-nav-menu"></span> Cuestionarios
                </NavLink>
                <NavLink class="nav-link" href="GestionAlumnos" @onclick="CollapseMenu">
                    <span class="bi bi-people-fill-nav-menu"></span> Administrar Alumnos
                </NavLink>
            }

            @if (isAuthenticated && isAlumno)
            {
                <NavLink class="nav-link" href="preguntasAlumno" @onclick="CollapseMenu">
                    <span class="bi bi-pencil-fill-nav-menu"></span> Cuestionarios
                </NavLink>
                <NavLink class="nav-link" href="cuestionariosRealizados" @onclick="CollapseMenu">
                    <span class="bi bi-trophy-fill-nav-menu"></span> Mis Calificaciones
                </NavLink>
            }
            @if (isAuthenticated && isAdmin)
            {
                <NavLink class="nav-link" href="admin/cuestionarios" @onclick="CollapseMenu">
                    <span class="bi bi-pencil-fill-nav-menu"></span> Cuestionarios
                </NavLink>
                <NavLink class="nav-link" href="admin/profesores" @onclick="CollapseMenu">
                    <span class="bi bi-pencil-fill-nav-menu"></span> Profesores
                </NavLink>
                <NavLink class="nav-link" href="admin/alumnos" @onclick="CollapseMenu">
                    <span class="bi bi-pencil-fill-nav-menu"></span> Alumnos
                </NavLink>
            }
        </div>

        <div class="auth-section">
            <AuthorizeView>
                <Authorized>
                    <div class="nav-link user-profile">
                        <span class="bi bi-person-fill-nav-menu"></span>
                        @context.User.Identity?.Name
                    </div>
                    <form action="Account/Logout" method="post" class="logout-form">
                        <AntiforgeryToken />
                        <input type="hidden" name="returnUrl" value="Account/Login"/>
                        <button type="submit" class="nav-link logout-button" @onclick="CollapseMenu">
                            <span class="bi bi-box-arrow-right-nav-menu"></span>
                            Cerrar sesión
                        </button>
                    </form>
                </Authorized>
                <NotAuthorized>
                    <NavLink class="nav-link login-button" href="Account/Login" @onclick="CollapseMenu">
                        <span class="bi bi-box-arrow-in-right-nav-menu"></span>
                        Login
                    </NavLink>
                    <NavLink class="nav-link register-button" href="Account/Register" @onclick="CollapseMenu">
                        <span class="bi bi-person-plus-nav-menu"></span>
                        Registro
                    </NavLink>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</nav>

@code {
    private string? currentUrl;
    private bool isAuthenticated = false;
    private bool isProfesor = false;
    private bool isAlumno = false;
    private bool isAdmin = false;

    private bool collapseNavMenu = true;

    protected override async Task OnInitializedAsync()
    {
        // Verificar el estado de autenticación
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        // Confirmar que el usuario esté autenticado
        Console.WriteLine($"User authenticated: {user?.Identity?.IsAuthenticated}");

        if (user != null && user.Identity?.IsAuthenticated == true)
        {
            // Obtener el usuario desde UserManager
            var appUser = await UserManager.GetUserAsync(user);

            if (appUser != null)
            {
                // Establecer como autenticado
                isAuthenticated = true;

                // Obtener los roles del usuario
                var roles = await UserManager.GetRolesAsync(appUser);

                Console.WriteLine($"User roles: {string.Join(", ", roles)}");

                // Verificar si el usuario tiene el rol de "profesor" (ignorar mayúsculas y minúsculas)
                isProfesor = roles.Contains("profesor", StringComparer.OrdinalIgnoreCase);
                isAlumno = roles.Contains("alumno", StringComparer.OrdinalIgnoreCase);
                isAdmin = roles.Contains("admin", StringComparer.OrdinalIgnoreCase);

                Console.WriteLine($"Is Profesor: {isProfesor}");
                Console.WriteLine($"Is Alumno: {isAlumno}");
				Console.WriteLine($"Is Admin: {isAdmin}");
            }
            else
            {
                Console.WriteLine("No ApplicationUser found.");
            }
        }
        else
        {
            Console.WriteLine("User is not authenticated.");
        }

        // Si el usuario no está autenticado = falso
        if (!isAuthenticated)
        {
            isProfesor = false;
            isAlumno = false;
            isAdmin = false;
        }

        // Determinar la URL de navegación para saber cuál está activa
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        // Re-renderizar al cargar el estado
        StateHasChanged();

        await base.OnInitializedAsync();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // Actualizar la URL actual en cada cambio de ubicación
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private void CollapseMenu()
    {
        collapseNavMenu = true;
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public void Dispose()
    {
        // Limpiar cuando se termine
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
